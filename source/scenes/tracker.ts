import WizardScene from 'telegraf/scenes/wizard'
import { deleteMessages, deleteAfter } from '@/helper'
import axios from 'axios'
import moment from 'moment';
import Extra from 'telegraf/extra';
import Markup from 'telegraf/markup';
import { getMyProjects } from '@/menu/clockify'
import takeRight from 'lodash/takeRight'

type F = {
    name: string
    errorHandler: (...agrs: any[]) => any
}

const DESCR_PREFIX = '–û–ø–∏—Å:'
const buttons = {
    EXIST_TASK: 'üéØ –í–∏–±—Ä–∞—Ç–∏ –º–∏–Ω—É–ª–µ –∑–∞–≤–¥–∞–Ω–Ω—è',
    DEV_DESCRIPTION: `${DESCR_PREFIX} –†–æ–∑—Ä–æ–±–∫–∞ –ø—Ä–æ—î–∫—Ç—É`,
    TEST_DESCRIPTION: `${DESCR_PREFIX} –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É`,
    MEET_DESCRIPTION: `${DESCR_PREFIX} –ú—ñ—Ç–∏–Ω–≥ –ø–æ –ø—Ä–æ—î–∫—Ç—É`,
    NO_DESCRIPTION: '–ë–µ–∑ –æ–ø–∏—Å—É',
    GO_BACK: '‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥',
    CANCEL: 'üß® –í—ñ–¥–º—ñ–Ω–∞'
}

const TO_PROJECTS = '‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –ø—Ä–æ—î–∫—Ç—ñ–≤'
const EMPTY_PROJECT = 'üé≤ –ë–µ–∑ –ø—Ä–æ—î–∫—Ç—É'

export const trackTaskWithDescr = async ({ ctx, description, projectId }: any = {}) => {
    const { data: { id: taskId } } = await axios.post(`https://global.api.clockify.me/workspaces/${ctx.session.clockify?.workspace}/timeEntries/full`, {
        billable: false,
        customFields: [],
        description,
        projectId,
        start: moment(new Date),
        tagIds: null,
        taskId: null
    }, 
    {
        headers: {
            'x-auth-token': ctx.session.clockify?.token
        }
    })
    return taskId
}

export const getLastTrack = async({ ctx }: any = {}) => {
    const { data } = await axios.get(`https://global.api.clockify.me/workspaces/${ctx.session.clockify?.workspace}/timeEntries/user/${ctx.session.clockify?.uid}/full?page=0&limit=1`,
    {
        headers: {
            'x-auth-token': ctx.session.clockify?.token
        }
    })
    const [ , lastTracker ] = data.timeEntriesList;
    if(lastTracker && !lastTracker?.timeInterval?.end) return lastTracker
    else return null
}

export const getLastTracks = async({ ctx, projectId }: any = {}) => {
    const { data } = await axios.get(`https://global.api.clockify.me/workspaces/${ctx.session.clockify?.workspace}/timeEntries/user/${ctx.session.clockify?.uid}/full?page=0&limit=100`,
    {
        headers: {
            'x-auth-token': ctx.session.clockify?.token
        }
    })
    const result = [] as any[]
    data.timeEntriesList.forEach(({ description, projectId: pid }: any) => {
        description = description?.trim()
        if(description && !result.includes(description) && projectId === pid) {
            result.push(description)
        }
    });
    return result
}

export const stopLastTrack = async({ ctx }: any = {}) => {
    try {
        let lastTracker = await getLastTrack({ ctx });
        
        if(lastTracker) {
            await axios.put(`https://global.api.clockify.me/workspaces/${ctx.session.clockify?.workspace}/timeEntries/${lastTracker.id}/full?stop-timer=true`, {
                billable: false,
                customFields: [],
                description: lastTracker.description,
                projectId: lastTracker.project?.id,
                start: lastTracker.timeInterval.start,
                end: moment(new Date),
                tagIds: null,
                taskId: null
            }, 
            {
                headers: {
                    'x-auth-token': ctx.session.clockify?.token
                }
            })
            return { stoped: true }
        } else {
            return { stoped: false }
        }
    } catch(e) {
        console.log('Stop / ERROR: ', e.message);
        return { stopedError: e.message }
    }
}

export default (_bot: any) => {
    return ({ name, errorHandler }: F) => new WizardScene(
        name,
        errorHandler(async (ctx: any) => {
            try {
                if(!ctx.wizard.state.messages) {
                    ctx.wizard.state.messages = [];
                }
                const data = await getMyProjects(ctx);
                const { message_id } = await ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—î–∫—Ç!', Extra.markup(
                    Markup.keyboard([...data.map((item: any) => `${item.name}`), EMPTY_PROJECT, buttons.CANCEL])
                ))
                ctx.wizard.state.messages.push(message_id)                
                return ctx.wizard.next();
            } catch(e) {
                console.log('ERROR_1:', e.message);
                await deleteAfter(ctx.reply('‚ùå –ú–æ–∂–ª–∏–≤–æ –≤–∞—à—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ –Ω–µ –≤—ñ—Ä–Ω—ñ'), ctx, 3);
                await deleteMessages(ctx, ctx.wizard.state.messages);
                return ctx.scene.leave();
            }
        }),
        errorHandler(async (ctx: any) => {
            /**
             * With cancel option
             */
            if(ctx.message.text === buttons.CANCEL) {
                await deleteAfter(ctx.reply('‚ùé –í—ñ–¥–º—ñ–Ω–∞!'), ctx, 3);
                await deleteMessages(ctx, ctx.wizard.state.messages);
                return ctx.scene.leave();
            }

            try {
                const data = await getMyProjects(ctx);
                const idProject = data.find((i: any) => i.name === ctx.message.text)?.id;
                ctx.wizard.state.idProject = idProject;

                const isEmptyProject = ctx.message.text === EMPTY_PROJECT;
                
                if(!idProject && !isEmptyProject) {
                    await ctx.reply('‚ÄºÔ∏è‚ÄºÔ∏è –í–∏ –≤–∏–±—Ä–∞–ª–∏ –Ω–µ—ñ—Å–Ω—É—é—á–∏–π –ø—Ä–æ—î–∫—Ç. –ê–±–æ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –±–µ–∑ –ø—Ä–æ—î–∫—Ç—É, –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –Ω–∞–∑–∞–¥!')
                }

                const { message_id } = await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç–∞—Å–∫–∏ —É –ø–æ–ª–µ –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω—É –æ–ø—Ü—ñ—é!', Extra.markup(
                    Markup.keyboard(isEmptyProject ? takeRight(Object.values(buttons), 2) : Object.values(buttons))
                ))
                ctx.wizard.state.messages.push(message_id)
            } catch(e) {
                console.log('ERROR_2:', e.message);
                await deleteMessages(ctx, ctx.wizard.state.messages);
                return ctx.scene.leave();
            }
            return ctx.wizard.next();
        }),
        errorHandler(async (ctx: any) => {
            try {
                /**
                 * No button exist
                 */
                if(ctx.message.text !== buttons.EXIST_TASK) {
                    ctx.wizard.selectStep(3);
                    return ctx.wizard.steps[ctx.wizard.cursor](ctx);
                } else {
                    const tasksList = await getLastTracks({ctx, projectId: ctx.wizard.state.idProject})

                    if(tasksList?.length) {
                        const { message_id } = await ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ, –≤–∏ —Ç—Ä–µ–∫–∞–ª–∏ —Ä–∞–Ω—ñ—à–µ!', Extra.markup(
                            Markup.keyboard([...tasksList, TO_PROJECTS, buttons.CANCEL])
                        ))
                        ctx.wizard.state.messages.push(message_id);
                    } else {
                        const { message_id } = await ctx.reply('‚ùé –ù–µ –∑–Ω–∞—Ö–æ–¥–∂—É –∑–∞–≤–¥–∞–Ω—å –∑–∞ –º–∏–Ω—É–ª—ñ –¥–Ω—ñ –ø–æ –ø—Ä–æ—î–∫—Ç—É')
                        ctx.wizard.state.messages.push(message_id);
                        ctx.wizard.selectStep(0);
                        return ctx.wizard.steps[ctx.wizard.cursor](ctx);
                    }    
                }
            } catch(e) {
                await deleteAfter(ctx.reply('‚ùå –°—Ç–∞–ª–∞—Å—å –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞!'), ctx, 3);
                await deleteMessages(ctx, ctx.wizard.state.messages);
                return ctx.scene.leave();
            }
        }),
        errorHandler(async (ctx: any) => {
            try {
                ctx.wizard.state.descProject = ctx.message.text;
                /**
                 * Go back
                 */
                if([buttons.GO_BACK, TO_PROJECTS].includes(ctx.message.text)) {
                    ctx.wizard.selectStep(0);
                    return ctx.wizard.steps[ctx.wizard.cursor](ctx); 
                }
                /**
                 * With selected description
                 */
                if(ctx.message.text.startsWith(DESCR_PREFIX)) {
                    ctx.message.text = ctx.message.text.replace(DESCR_PREFIX, '')
                }
                /**
                 * Empty description
                 */
                if(ctx.message.text === buttons.NO_DESCRIPTION) {
                    ctx.message.text = ''
                }
                /**
                 * With cancel option
                 */
                if(ctx.message.text === buttons.CANCEL) {
                    await deleteAfter(ctx.reply('‚ùé –í—ñ–¥–º—ñ–Ω–∞!'), ctx, 3);
                    await deleteMessages(ctx, ctx.wizard.state.messages);
                    return ctx.scene.leave();
                }

                /** Tracking logic START */
                const { stoped, stopedError } = await stopLastTrack({ ctx })
                if(stopedError) throw new Error()
                if(stoped) await deleteAfter(ctx.reply('‚úÖ –ë—É–ª–æ –∑—É–ø–∏–Ω–µ–Ω–µ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è!'), ctx, 3);
            
                await trackTaskWithDescr({
                    ctx,
                    description: ctx.message.text,
                    projectId: ctx.wizard.state.idProject
                })

                await deleteAfter(ctx.reply('‚úÖ –£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω–µ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è, –ø—Ä–∞—Ü—é—î–º–æ –¥–∞–ª—ñ!'), ctx, 3);
                await deleteMessages(ctx, ctx.wizard.state.messages);
                return ctx.scene.leave();
                /** Tracking logic END */
            } catch(e) {
                await deleteAfter(ctx.reply('‚ùå –°—Ç–∞–ª–∞—Å—å –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞!'), ctx, 3);
                await deleteMessages(ctx, ctx.wizard.state.messages);
                return ctx.scene.leave();
            }
        }),
    );
}