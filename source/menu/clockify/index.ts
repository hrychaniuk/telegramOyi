// import get from 'lodash/get';
import { MenuTemplate } from 'telegraf-inline-menu';
import { scenes } from '@/modules/Scenes'
import { parse } from '@/modules/ClockifyParser'

import { backButtons } from '../general';
import { MyContext } from '@/context';
import { deleteAfter } from '@/helper';
import { getLastTrack, stopLastTrack } from '@/scenes/tracker';
import { menu as portalMenu } from '../portal';
import axios from 'axios';
import moment from 'moment';

export const menu = new MenuTemplate<MyContext>(ctx => 
	'Clockify —Å–ø—Ä–æ—â—É—î –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á, –ø—Ä–æ–ø–æ–Ω—É—î —à–∞–±–ª–æ–Ω–Ω—ñ –æ–ø–∏—Å–∏ —Ç–∞ –º–∞—î –∞–∫—Ç—É–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—î–∫—Ç—ñ–≤. –î–æ "–ø—Ä–æ—î–∫—Ç—ñ–≤" –≤—ñ–¥–Ω–æ—Å—è—Ç—å—Å—è –ª–∏—à–µ —Ç—ñ, —è–∫—ñ –ø–æ–∑–Ω–∞—á–µ–Ω—ñ –º—ñ—Ç–∫–æ—é ‚≠ê (—É–ª—é–±–ª–µ–Ω—ñ) —É –≤–µ–±-–ø–æ—Ä—Ç–∞–ª—ñ Clockify. –ü—Ä–∏—î–º–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è.' + '\n\n' +
	(ctx.session.clockify?.workspaceName ? ('üß© Workspace: ' + ctx.session.clockify?.workspaceName) : '‚ÄºÔ∏è –î–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±–ª—ñ–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–π–¥—ñ—Ç—å —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è - /settings')
);

export const getMyProjects = async (ctx: MyContext) => {
	const wpid = ctx.session.clockify?.workspace
	const uid = ctx.session.clockify?.uid
	const { data } = await axios.get(`https://global.api.clockify.me/workspaces/${wpid}/users/${uid}/projects/favorites/${uid}/detailed`, {
			headers: {
				'x-auth-token': ctx.session.clockify?.token
			}
	})
	return data
}

export const setClockifyToken = async (ctx: MyContext) => {
	if(!ctx.session.clockify) throw new Error();

	const response = await axios.post('https://global.api.clockify.me/auth/token', {
		email: ctx.session.clockify?.login,
		password: ctx.session.clockify?.password
	});
	ctx.session.clockify.token = response.data.token;

	return response
}

const statusHandler = async (ctx: MyContext) => {
    try {
        await setClockifyToken(ctx)

		const tracker = await getLastTrack({ ctx })
		if(tracker) {
			const time = moment.duration(moment().diff(moment(tracker.timeInterval.start)));
			const formatted = moment.utc(time.asMilliseconds()).format("HH:mm:ss");

			return ctx.answerCbQuery(`üïî ${tracker.project?.name || '–ë–µ–∑ –Ω–∞–∑–≤–∏'} / ${formatted} / ${tracker.description} üïó`)
		} else {
			return ctx.answerCbQuery(`‚úÖ –í–∞—à—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ –≤—ñ—Ä–Ω—ñ`);
		}			
    } catch(e) {
        return ctx.answerCbQuery('‚ùå –ú–æ–∂–ª–∏–≤–æ –≤–∞—à—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ –Ω–µ –≤—ñ—Ä–Ω—ñ');
    }
}

const finishHandler = async (ctx: MyContext) => {
    try {
        await setClockifyToken(ctx)

		const { stoped, stopedError } = await stopLastTrack({ ctx })

		if(stopedError) throw new Error();
		if(stoped) await deleteAfter(ctx.reply('‚úÖ –£—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –±—É–ª–∏ –∑—É–ø–∏–Ω–µ–Ω—ñ'), ctx, 3);
		if(!stoped) await deleteAfter(ctx.reply('‚úÖ –ù–µ–º–∞—î —â–æ –∑—É–ø–∏–Ω—è—Ç–∏'), ctx, 3);

		return true
    } catch(e) {
        return ctx.answerCbQuery('‚ùå –ú–æ–∂–ª–∏–≤–æ –≤–∞—à—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ –Ω–µ –≤—ñ—Ä–Ω—ñ');
    }
}

const tableHandler = async (ctx: MyContext) => {
	let message_id: any
    try {
		await setClockifyToken(ctx)
		message_id = (await ctx.reply('üåÄ –ü–æ—á–∏–Ω–∞—é —Ä–µ–Ω–¥–µ—Ä–∏—Ç–∏'))?.message_id
		const buffer = await parse({ ctx });
		await ctx.replyWithPhoto({ source: Buffer.from(buffer) })
		return true
    } catch(e) {
        return ctx.answerCbQuery('‚ùå –ú–æ–∂–ª–∏–≤–æ –≤–∞—à—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ –Ω–µ –≤—ñ—Ä–Ω—ñ');
    } finally {
		if(message_id) await deleteAfter({ message_id }, ctx, 0);
	}
}

menu.interact('üîÑ –°—Ç–∞—Ç—É—Å', 'clockify-refresh', { do: statusHandler });
menu.interact('üöÄ –¢—Ä–µ–∫–∞—î–º–æ!', 'clockify-track', { do: async (ctx: any) => {
	try {
		await setClockifyToken(ctx);
		ctx.scene.enter(scenes.FORM_TRACKER);
		return true;
	} catch(e) {
        return ctx.answerCbQuery('‚ùå –ú–æ–∂–ª–∏–≤–æ –≤–∞—à—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ –Ω–µ –≤—ñ—Ä–Ω—ñ');
	}
} });
menu.interact('üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏', 'clockify-done', { do: finishHandler });
menu.interact('üì∏ –¢–∞–±–ª–∏—Ü—è —á–∞—Å—É', 'clockify-table', { do: tableHandler });
menu.submenu('üåï OYI Portal', 'oyi-portal-menu', portalMenu);

menu.manualRow(backButtons);
